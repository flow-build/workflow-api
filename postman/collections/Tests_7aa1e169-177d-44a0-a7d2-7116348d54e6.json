{
	"info": {
		"_postman_id": "81e44739-2999-4f0d-9855-5f26f493f763",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "2387160-81e44739-2999-4f0d-9855-5f26f493f763"
	},
	"item": [
		{
			"name": "Healthcheck",
			"item": [
				{
					"name": "Base",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should respond version\", () => {\r",
									"    pm.expect(response.version).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should respond engine version\", () => {\r",
									"    pm.expect(response.engine).to.exist;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "ff7ea860-19ce-4d23-9707-ef06750526ed"
							}
						}
					],
					"id": "fed4b952-d486-4825-9c1e-3cf937c5171e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/",
							"host": [
								"{{host}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should respond version\", () => {\r",
									"    pm.expect(response.version).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should respond engine version\", () => {\r",
									"    pm.expect(response.engine).to.exist;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "035dba3d-f008-47db-9584-6aea773e5135"
							}
						}
					],
					"id": "1223b38e-79e7-4451-af2f-1611e1f90e57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/healthcheck",
							"host": [
								"{{host}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				}
			],
			"id": "1f626f85-56e0-4de8-9aeb-9345b42e5c2c",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "7b07d505-a62f-48e2-a4d2-26b1825abb24"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "475b3b7b-f195-4b2f-919c-bae0c7ebe359"
					}
				}
			]
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "Create Token - without payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return jwtToken\", () => {\r",
									"    pm.expect(response.jwtToken).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return payload\", () => {\r",
									"    pm.expect(response.payload).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return actor_id\", () => {\r",
									"    pm.expect(response.payload.actor_id).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return session_id\", () => {\r",
									"    pm.expect(response.payload.session_id).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Claims should be empty\", () => {\r",
									"    pm.expect(response.payload.claims).to.have.length(0);\r",
									"})\r",
									"\r",
									"pm.environment.set(\"token\", response.jwtToken)"
								],
								"type": "text/javascript",
								"id": "c04a3441-707b-4ebd-8cdc-b3afb66ec91a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"actor_id\",\"06dc94af-3a8a-40e3-be2c-4942c991e8b5\")"
								],
								"type": "text/javascript",
								"id": "0eb26a41-68b0-4df7-9013-e990bdb5b66e"
							}
						}
					],
					"id": "7e557c5b-ec30-4118-8737-6c4211884a0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token - with actor_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const providedActorId = pm.collectionVariables.get(\"actor_id\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should use provided actor_id\", () => {\r",
									"    pm.expect(response.payload.actor_id).to.eql(providedActorId);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "54333176-5dba-4c54-92e6-a8a4cabe19f9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"actor_id\",\"3556a862-1663-4fed-b4a0-a028d1be2a4e\")"
								],
								"type": "text/javascript",
								"id": "a82a1cc1-562c-49c6-8a81-c8bfb3a57578"
							}
						}
					],
					"id": "b25f1fa1-e50b-4e09-9ee9-293cb43aa125",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"actor_id\": \"{{actor_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token - with duration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const definedDuration = pm.collectionVariables.get('duration');\r",
									"const duration = response.payload.exp - response.payload.iat;\r",
									"\r",
									"pm.test(\"Should use defined duration\", () => {\r",
									"    pm.expect(duration).to.eql(definedDuration);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f77ace58-6f95-4973-9086-852dcc8025fa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"duration\", 6000)"
								],
								"type": "text/javascript",
								"id": "11b8667b-891d-45df-a7c9-4981761998e3"
							}
						}
					],
					"id": "85902dba-3c76-471c-97ad-dd6b9eb9adcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-duration",
								"value": "{{duration}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token - with claims",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const providedClaims = pm.collectionVariables.get(\"claims\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should use provided claims\", () => {\r",
									"    pm.expect(JSON.stringify(response.payload.claims)).to.eql(providedClaims);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "7f4c527b-9ce6-4596-b65b-0c9f74cbc62c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"claims\",'[\"a\",\"b\"]')"
								],
								"type": "text/javascript",
								"id": "b6595111-c06d-4d60-9be0-ea832bbc55f1"
							}
						}
					],
					"id": "cbe7c4d9-90db-4ebd-af96-19e030e7a5d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"claims\": {{claims}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token - with claims as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const providedClaims = pm.collectionVariables.get(\"claims\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should convert claims to an Array\", () => {\r",
									"    pm.expect(response.payload.claims[0]).to.eql(providedClaims);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "10910a44-6a45-42b1-a31b-08b6b0b8b5ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"claims\",\"abc\")"
								],
								"type": "text/javascript",
								"id": "e494f914-e324-42ad-9ae4-ce741ec424c2"
							}
						}
					],
					"id": "074e9ceb-38c4-49e5-9034-5ac03b8101bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"claims\": \"{{claims}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/token",
							"host": [
								"{{host}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"id": "9183e4d4-ee5b-4f28-8298-8a3b2406f57c",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "6f5a4002-6ac2-444d-af0a-5daef18e71a1"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "1176c382-2be1-4b4f-b657-6e50b76a7550"
					}
				}
			]
		},
		{
			"name": "Packages",
			"item": [
				{
					"name": "Create Package (without token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5a599f31-56ad-4acc-94e6-5ea0054cb388"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c3112f3f-6c0c-4be2-968a-5eeb9cba462c"
							}
						}
					],
					"id": "75a8b17c-b9c9-4d73-b51a-813af1a68a5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$guid}}\",\r\n    \"description\": \"test package\",\r\n    \"code\": [\r\n        \"do\",\r\n        [\r\n            \"def\",\r\n            \"package_test_1\",\r\n            [\r\n                \"fn\",\r\n                [],\r\n                [\r\n                    \"prn\",\r\n                    [\r\n                        \"`\",\r\n                        \"Dummy test is running!\"\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/packages",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return package_id\", () => {\r",
									"    pm.expect(response.package_id).to.exist;\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"package_id\",response.package_id)"
								],
								"type": "text/javascript",
								"id": "eaed1d1f-1c8b-492a-abce-840f82532007"
							}
						}
					],
					"id": "133abc58-6ad1-4647-95cb-d99228086734",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$guid}}\",\r\n    \"description\": \"test package\",\r\n    \"code\": [\r\n        \"do\",\r\n        [\r\n            \"def\",\r\n            \"package_test_1\",\r\n            [\r\n                \"fn\",\r\n                [],\r\n                [\r\n                    \"prn\",\r\n                    [\r\n                        \"`\",\r\n                        \"Dummy test is running!\"\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/packages",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const package_id = pm.collectionVariables.get(\"package_id\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return id\", () => {\r",
									"    pm.expect(response.id).to.eql(package_id);\r",
									"})\r",
									"\r",
									"pm.test(\"Should return created_at\", () => {\r",
									"    pm.expect(response.created_at).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return name\", () => {\r",
									"    pm.expect(response.name).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return description\", () => {\r",
									"    pm.expect(response.description).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Should return code\", () => {\r",
									"    pm.expect(response.code).to.exist;\r",
									"})"
								],
								"type": "text/javascript",
								"id": "15c98d74-7233-43fc-8efa-d7424bda2ba5"
							}
						}
					],
					"id": "cf762d96-10e2-415e-bf3f-114d86ec3db4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/packages/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{package_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const package_id = pm.collectionVariables.get(\"package_id\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return 1 package deleted\", () => {\r",
									"    pm.expect(response.deleted).to.eql(1);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "a61ef00d-67d7-4e16-a039-96c927adedf4"
							}
						}
					],
					"id": "a1df2535-7a46-44ab-a433-3bf5847442d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/packages/:id",
							"host": [
								"{{host}}"
							],
							"path": [
								"packages",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{package_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "692db94d-4d54-4934-9b93-ecdf746ced2c"
		},
		{
			"name": "Workflow",
			"item": [
				{
					"name": "Create Workflow",
					"item": [
						{
							"name": "Create Workflow (without token)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930a40d3-d943-42ea-81e5-172f467db053",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6aad346c-669a-49dd-aaf8-090363310ee8",
										"exec": [
											"pm.test(\"Create workflow should validate token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7baa18c6-9837-4c7b-b32a-889f3604b90b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (without body)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "19c537a0-1b71-4781-b44d-da7826d5c19b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return errors\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return 3 errors\", () => {\r",
											"    pm.expect(response.error).to.have.length(3);\r",
											"})"
										],
										"type": "text/javascript",
										"id": "8e8d9de5-3744-4b16-af47-d325ed2fdbd7"
									}
								}
							],
							"id": "ce361639-03c4-460a-aae4-e51c5a218977",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (without id)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b0cd790-ff5c-4a33-a532-90543d9bf7be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e8b2dfa-ea09-47f5-9a33-81bff6243a64",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return workflow_id\", () => {\r",
											"    pm.expect(response.workflow_id).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return hash\", () => {\r",
											"    pm.expect(response.hash).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return version\", () => {\r",
											"    pm.expect(response.version).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should have no warnings\", () => {\r",
											"    pm.expect(response.warnings).to.exist;\r",
											"    pm.expect(response.warnings).to.have.length(0);\r",
											"})\r",
											"\r",
											"pm.environment.set(\"fb_test_createWorkflow_workflowId\",response.workflow_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a1df48e0-5156-46d7-ab4f-23cad3869ed9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"fb_test_createWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (with id)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e1b1e96-7448-42a5-b4a6-5c4076ba97dd",
										"exec": [
											"var uuid = require(\"uuid\")\r",
											"\r",
											"const id = uuid.v4();\r",
											"\r",
											"pm.environment.set(\"fb_test_createWorkflow_workflowId\", id)\r",
											"pm.environment.set(\"fb_test_createWorkflow_workflowName\", \"fb_test_createWorkflow\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "56bc4865-4873-460d-9895-cc90bdbe3136",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_createWorkflow_workflowId\")\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return workflow_id\", () => {\r",
											"    pm.expect(response.workflow_id).to.eql(workflow_id);\r",
											"})\r",
											"\r",
											"pm.test(\"Should return hash\", () => {\r",
											"    pm.expect(response.hash).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return version\", () => {\r",
											"    pm.expect(response.version).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should have no warnings\", () => {\r",
											"    pm.expect(response.warnings).to.exist;\r",
											"    pm.expect(response.warnings).to.have.length(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "67362102-8087-40c4-82fc-a76cbb807ba3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"workflow_id\": \"{{fb_test_createWorkflow_workflowId}}\",\r\n  \"name\": \"{{fb_test_createWorkflow_workflowName}}\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (repeated id)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6806fc5-9e4e-473f-a992-4df55e9ff468",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07e6dccb-e2a4-401b-8df3-260a2d5885b2",
										"exec": [
											"const response = pm.response.json();\r",
											"pm.collectionVariables.get(\"workflow_id\")\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return that this id already exist\", () => {\r",
											"    pm.expect(response.error).to.eql(\"workflow already exists\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d1be79d-a5a9-4774-93af-815ecbf6a52a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"workflow_id\": \"{{fb_test_createWorkflow_workflowId}}\",\r\n  \"name\": \"fb_test_createWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (not a uuid)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b337b88f-90e6-482b-acba-5024a47ba332",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d99cab9-4566-46d3-929a-f8185ba9ca0e",
										"exec": [
											"const response = pm.response.json();\r",
											"pm.collectionVariables.get(\"workflow_id\")\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error[0].field).to.eql(\"/workflow_id\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ac8b6e33-9867-471c-952e-dc7903e96edc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"workflow_id\": \"not_a_uuid\",\r\n    \"name\": \"fb_test_createWorkflow\",\r\n    \"description\": \"system workflow\",\r\n    \"blueprint_spec\": {\r\n        \"requirements\": [\r\n            \"core\"\r\n        ],\r\n        \"prepare\": [],\r\n        \"nodes\": [\r\n            {\r\n                \"id\": \"1\",\r\n                \"type\": \"Start\",\r\n                \"name\": \"Start node\",\r\n                \"parameters\": {\r\n                    \"input_schema\": {}\r\n                },\r\n                \"next\": \"2\",\r\n                \"lane_id\": \"1\"\r\n            },\r\n            {\r\n                \"id\": \"3\",\r\n                \"type\": \"Finish\",\r\n                \"name\": \"Finish node\",\r\n                \"next\": null,\r\n                \"lane_id\": \"1\"\r\n            }\r\n        ],\r\n        \"lanes\": [\r\n            {\r\n                \"id\": \"1\",\r\n                \"name\": \"the_only_lane\",\r\n                \"rule\": [\r\n                    \"fn\",\r\n                    [\r\n                        \"&\",\r\n                        \"args\"\r\n                    ],\r\n                    true\r\n                ]\r\n            }\r\n        ],\r\n        \"environment\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (lane missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "adb08e2c-463f-4d1c-aa0f-47d6142dcdc3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79a4fbe6-f66a-4b03-9981-e53e2e085771",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return Invalid Connections\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Connections\");\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error should point to lane\", () => {\r",
											"    pm.expect(response.error[0].lane).to.be.false;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "93c14dce-9994-4075-bdae-47fe526df4a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"fb_test_createWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"4\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (node missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00e65c82-6041-4a18-a277-341075a884be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c3d62cca-58f1-439c-a217-aa13308086b0",
										"exec": [
											"const response = pm.response.json();\r",
											"pm.collectionVariables.get(\"workflow_id\")\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return Invalid Connections\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid Connections\");\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error should point to next\", () => {\r",
											"    pm.expect(response.error[0].next).to.be.false;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c292a75e-8bbf-4c91-8ad7-82b97b08b435",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"fb_test_createWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"3\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow (duplicated lane)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1eb2b932-0ef7-4b08-b394-9267c25425e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "11bb4a39-ef14-4dcf-b191-117d70e60972",
										"exec": [
											"const response = pm.response.json();\r",
											"pm.collectionVariables.get(\"workflow_id\")\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return message\", () => {\r",
											"    pm.expect(response.message).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Should return error\", () => {\r",
											"    pm.expect(response.error).to.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Error should point to Lanes\", () => {\r",
											"    pm.expect(response.error[0].field).to.eql(\"/blueprint_spec/lanes\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "10d26ce5-0b3d-4eae-8d8f-b40e5eb37661",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"fb_test_createWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      },\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\"fn\", [\"&\", \"args\"], true]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						}
					],
					"id": "fff3b927-35bf-45c1-bd66-41516227451f"
				},
				{
					"name": "Create Process",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create the Workflow",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1290ae79-abad-48a3-95f2-a2c60fd761a8",
												"exec": [
													"pm.environment.set(\"fb_test_createProcess_workflowName\",\"fb_test_createProcess\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e03238f4-08bb-42c3-b165-66d43a4ce4aa",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"fb_test_createProcess_workflowId\",response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49c9e1eb-f655-44b4-88d3-cf305d659318",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{fb_test_createProcess_workflowName}}\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								}
							],
							"id": "7fdfa0b2-70a5-447b-be65-254eaa1e59c2"
						},
						{
							"name": "Create Process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dc34423-9d92-4a50-a70e-53305ad938c9",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_createProcess_workflowId\")\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow data\", () => {\r",
											"    pm.expect(response.workflow).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow version\", () => {\r",
											"    pm.expect(response.workflow.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow name\", () => {\r",
											"    pm.expect(response.workflow.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow id\", () => {\r",
											"    pm.expect(response.workflow.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"The workflow_id should be the same provided\", () => {\r",
											"    pm.expect(response.workflow.id).to.eql(workflow_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb69959d-2812-4cbd-99ad-a9298ea9a297",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id",
										"create"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_createProcess_workflowId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Process (random id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Should NOT return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "0b27e4d5-9a6d-4f7e-9a7b-fe89f0914047"
									}
								}
							],
							"id": "4fcc52b9-6155-42f5-9ca7-6cbdc5c550d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id",
										"create"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Process by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a8a8f22-2a4b-4ca9-adad-5e398d7828be",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_createProcess_workflowId\")\r",
											"const workflow_name = pm.environment.get(\"fb_test_createProcess_workflowName\")\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow data\", () => {\r",
											"    pm.expect(response.workflow).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow version\", () => {\r",
											"    pm.expect(response.workflow.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow name\", () => {\r",
											"    pm.expect(response.workflow.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"The workflow_id should be the same provided\", () => {\r",
											"    pm.expect(response.workflow.name).to.eql(workflow_name);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow id\", () => {\r",
											"    pm.expect(response.workflow.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"The workflow_id should be the same provided\", () => {\r",
											"    pm.expect(response.workflow.id).to.eql(workflow_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8d665a74-daf5-4667-9f0c-b4a0818b5100",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name",
										"create"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{fb_test_createProcess_workflowName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Process by Name (random name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Should NOT return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "766fbd2d-255b-46cf-b3a3-4a861e126daf"
									}
								}
							],
							"id": "9e846015-a512-454d-9d09-74b7796b820b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name",
										"create"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "1b35f557-61d6-4b11-849b-a7389c4c43b4"
				},
				{
					"name": "Delete Workflow",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create workflow_id_for_delete",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed3cc41b-bc93-4b7e-a243-72f5de62a8c7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d6f7b6e2-cd58-4f81-a6ef-fa1672929f77",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"fb_test_deleteWorkflow_workflowId\",response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "63d11acd-f6cb-44f6-8047-6e39ac8f65fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fb_test_deleteWorkflow\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create workflow_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76d4e842-f3e9-4cba-b0b3-c25617549532",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec1f1761-3d2a-495b-8039-01688acb71e8",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"fb_test_deleteWorkflowAlt_workflowId\",response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3067628e-fb3d-4fe5-a2f1-ac2bbf3b970b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"fb_test_deleteWorkflowAlt\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Process for workflow_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76f7d142-64c6-40f3-90bb-cb363f390b8b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "43553a73-8d2b-4135-acc7-5743f2cd5ae4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/workflows/:id/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows",
												":id",
												"create"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{fb_test_deleteWorkflowAlt_workflowId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "9348b568-98e3-4a1f-9b4c-97c40096efc4"
						},
						{
							"name": "Delete Workflow (with id)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7377ef34-ce92-4200-a649-beff5cfc0f89",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9fef72c1-9ffc-4b5a-8941-e012d6bacf92",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b9c884d4-d3f3-404b-a2f7-e58b9933acc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_deleteWorkflow_workflowId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Workflow (id with process)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cb784e53-7f54-4dc4-a630-40d25b9f07e1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3623efd-4b57-4be7-99fc-b7f8a7cc744b",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message 'Cannot delete workflows with processes'\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Cannot delete workflows with processes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d0ed73c8-84df-47a6-ada2-ef778786d251",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_deleteWorkflowAlt_workflowId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Workflow (random id)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "2b94909d-9b0d-4a68-9010-559ac6ba63e3"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message 'No such workflow'\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No such workflow\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "19e6b128-ea03-47f9-b856-8ee4a0906dd3"
									}
								}
							],
							"id": "094afe0a-354e-42c9-8133-78b5554dc2f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "64af8bd0-47fc-4a6c-b221-21c4ceccef80"
				},
				{
					"name": "Start Process",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create the Workflow",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2307b7a1-12cb-4328-9c3f-5908b152a7ef",
												"exec": [
													"pm.environment.set(\"fb_test_startProcess_workflowName\",\"fb_test_startProcess\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2791de05-198f-4694-b053-1600e0aff420",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"fb_test_startProcess_workflowId\", response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "220b041b-1e54-4a6e-836d-a0d5701cf8d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{fb_test_startProcess_workflowName}}\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								}
							],
							"id": "bb02c3ae-05b0-4947-961c-9e1e7b4addc4"
						},
						{
							"name": "Start Process by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea9ed570-3396-4b04-8b02-216489bb77e6",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_startProcess_workflowId\")\r",
											"const workflow_name = pm.environment.get(\"fb_test_startProcess_workflowName\")\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow data\", () => {\r",
											"    pm.expect(response.workflow).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow version\", () => {\r",
											"    pm.expect(response.workflow.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow name\", () => {\r",
											"    pm.expect(response.workflow.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"The workflow_id should be the same provided\", () => {\r",
											"    pm.expect(response.workflow.name).to.eql(workflow_name);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow id\", () => {\r",
											"    pm.expect(response.workflow.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"The workflow_id should be the same provided\", () => {\r",
											"    pm.expect(response.workflow.id).to.eql(workflow_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dbf1e60f-e1c6-4e7c-a022-f9587a9e818a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name/start",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name",
										"start"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{fb_test_startProcess_workflowName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Process by Name (random name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Should NOT return a process_id\", () => {\r",
											"    pm.expect(response.process_id).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "022229e7-e393-49c4-b342-057214565efe"
									}
								}
							],
							"id": "de2cd6b1-6d18-46c8-9e05-8052340a0f7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name",
										"create"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b7cbe7f0-11d8-49fa-b24e-16ab1610e41a"
				},
				{
					"name": "List Workflows",
					"item": [
						{
							"name": "List Workflows",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5abeafd2-dff3-42ed-a5c4-8a8a7dad02cb",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return more than 1 workflow\", () => {\r",
											"    pm.expect(response.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"const first = response.find(i => i.name === \"basic\");\r",
											"\r",
											"pm.test(\"Should return workflow_id\", () => {\r",
											"    pm.expect(first.workflow_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return created_at\", () => {\r",
											"    pm.expect(first.created_at).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return name\", () => {\r",
											"    pm.expect(first.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return description\", () => {\r",
											"    pm.expect(first.description).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return version\", () => {\r",
											"    pm.expect(first.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should NOT return blueprint_spec\", () => {\r",
											"    pm.expect(first.blueprint_spec).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"workflow_id\",first.workflow_id);\r",
											"pm.collectionVariables.set(\"workflow_name\",first.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f32d7363-cd7e-4733-ae3c-7ea1957409fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						}
					],
					"id": "961f414d-7cc9-4a0d-b86f-e24e93d995b9"
				},
				{
					"name": "Convert Diagram",
					"item": [
						{
							"name": "Convert Diagram",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "013fbccb-a16a-4e79-a898-be510122a13d",
										"exec": [
											"var jsonObject = xml2Json(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has body\", function () {\r",
											"    pm.expect(responseBody).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e9d4e960-bc55-4397-82fe-37099abbbcf8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"fb_test_convertDiagram\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows/diagram",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"diagram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert Diagram (with workflow_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34436c97-5b82-49fa-ae86-397cbca0dee1",
										"exec": [
											"var jsonObject = xml2Json(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has body\", function () {\r",
											"    pm.expect(responseBody).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "82d3a525-59a0-4e00-ad29-c955bdd22d56",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"workflow_id\": \"{{fb_test_createWorkflow_workflowId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows/diagram",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"diagram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert Diagram (random id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message 'No such workflow'\", function () {\r",
											"    pm.expect(response.message).to.eql(\"No such workflow\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "49f8845f-3ccc-4182-a4d5-6864c8df15c1"
									}
								}
							],
							"id": "3cbe2702-84e4-408b-97a7-b40222e38f62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"workflow_id\": \"{{$guid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows/diagram",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"diagram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Convert Diagram (not a uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message 'Invalid uuid'\", function () {\r",
											"    pm.expect(response.message).to.eql(\"Invalid uuid\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "82abe9b4-c6c5-4344-b693-d367c1efca0d"
									}
								}
							],
							"id": "8f785969-5b95-4d7d-95b6-242f6fb573d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"workflow_id\": \"not_a_uuid\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows/diagram",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"diagram"
									]
								}
							},
							"response": []
						}
					],
					"id": "264f676d-388a-432a-b748-c5d8eb98edef"
				},
				{
					"name": "Read Workflows",
					"item": [
						{
							"name": "Read Workflows by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394a312c-0bc6-439e-951c-193ee2239564",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_createWorkflow_workflowId\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow_id provided\", () => {\r",
											"    pm.expect(response.workflow_id).to.eql(workflow_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return workflow_id\", () => {\r",
											"    pm.expect(response.workflow_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return created_at\", () => {\r",
											"    pm.expect(response.created_at).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return name\", () => {\r",
											"    pm.expect(response.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return description\", () => {\r",
											"    pm.expect(response.description).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return version\", () => {\r",
											"    pm.expect(response.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return hash\", () => {\r",
											"    pm.expect(response.hash).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return blueprint_spec\", () => {\r",
											"    pm.expect(response.blueprint_spec).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca58c3b2-b73b-4c5d-8483-180cf0923c94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_createWorkflow_workflowId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Workflows by Id (non existent id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "05c29adb-b65e-4b69-9d48-0fc99c2b9145"
									}
								}
							],
							"id": "17b51f08-19e9-46e8-9c98-82bd0d66b260",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Workflows by Id (invalid id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Message should be Invalid uuid\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid uuid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "0826ce77-7a41-4d0e-8677-a332fd6816af"
									}
								}
							],
							"id": "8c1f5aaf-cb2e-4978-ad0f-93ccb5f534a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "not_a_uuid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Workflows by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82d53d0b-d3f5-4f83-8fca-bac2c9dcba1d",
										"exec": [
											"const response = pm.response.json();\r",
											"const workflow_id = pm.environment.get(\"fb_test_createWorkflow_workflowId\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return the workflow_id provided\", () => {\r",
											"    pm.expect(response.workflow_id).to.eql(workflow_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return workflow_id\", () => {\r",
											"    pm.expect(response.workflow_id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return created_at\", () => {\r",
											"    pm.expect(response.created_at).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return name\", () => {\r",
											"    pm.expect(response.name).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return description\", () => {\r",
											"    pm.expect(response.description).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return version\", () => {\r",
											"    pm.expect(response.version).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return hash\", () => {\r",
											"    pm.expect(response.hash).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Should return blueprint_spec\", () => {\r",
											"    pm.expect(response.blueprint_spec).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c9807b5f-278a-4e9a-878f-24c4bad3c4e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{fb_test_createWorkflow_workflowName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Workflows by Name (non existent Name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "cfa7b5f5-88bc-4632-bfdf-78bb07cf597e"
									}
								}
							],
							"id": "80419650-b931-454c-aba4-5b4b1ff20b01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cbbe92a1-1755-4326-8dd2-69064beaf45d"
				},
				{
					"name": "List Processes",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create a Workflow",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "989fe9fd-b4a0-459f-9f79-c9550786e690",
												"exec": [
													"pm.environment.set(\"fb_test_listProcesses_workflowName\", \"fb_test_listProcesses\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e7a39ad9-0cee-4c4c-be9f-cc770ed89456",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"fb_test_listProcesses_workflowId\",response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "db698b2e-31c7-47a2-922a-96010042fb14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{fb_test_listProcesses_workflowName}}\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a Process",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "022cc280-9d8c-4945-ab26-2aaeed19c169",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4e01a284-7d57-41ef-9a0e-d15ff5e7344d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/workflows/:id/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows",
												":id",
												"create"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{fb_test_listProcesses_workflowId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create another Process",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd27c6f9-53fa-44be-92e2-5f9d34d2eefa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "23a732f7-c581-4b50-a0aa-a27cfa358ba4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/workflows/:id/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows",
												":id",
												"create"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{fb_test_listProcesses_workflowId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create other Workflow",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c9e4da8-7d41-4a4a-bc97-350bb86bcd98",
												"exec": [
													"pm.environment.set(\"fb_test_listProcessesAlt_workflowName\", \"fb_test_listProcessesAlt\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "13cb47aa-62c2-4300-a5a2-42aee10dd455",
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"fb_test_listProcessesAlt_workflowId\",response.workflow_id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "623dd849-7f37-4657-bc5e-ef4b69a3144e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{fb_test_listProcessesAlt_workflowName}}\",\r\n  \"description\": \"system workflow\",\r\n  \"blueprint_spec\": {\r\n    \"requirements\": [\r\n      \"core\"\r\n    ],\r\n    \"prepare\": [],\r\n    \"nodes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"type\": \"Start\",\r\n        \"name\": \"Start node\",\r\n        \"parameters\": {\r\n          \"input_schema\": {}\r\n        },\r\n        \"next\": \"2\",\r\n        \"lane_id\": \"1\"\r\n      },\r\n      {\r\n        \"id\": \"2\",\r\n        \"type\": \"Finish\",\r\n        \"name\": \"Finish node\",\r\n        \"next\": null,\r\n        \"lane_id\": \"1\"\r\n      }\r\n    ],\r\n    \"lanes\": [\r\n      {\r\n        \"id\": \"1\",\r\n        \"name\": \"the_only_lane\",\r\n        \"rule\": [\r\n          \"fn\",\r\n          [\r\n            \"&\",\r\n            \"args\"\r\n          ],\r\n          true\r\n        ]\r\n      }\r\n    ],\r\n    \"environment\": {}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/workflows",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a process on the other workflow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c481bf64-b7eb-4545-9cfe-81418eb0febd",
												"exec": [
													"const response = pm.response.json();\r",
													"const workflow_id = pm.environment.get(\"fb_test_listProcessesAlt_workflowId\")\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return a process_id\", () => {\r",
													"    pm.expect(response.process_id).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Should return the workflow data\", () => {\r",
													"    pm.expect(response.workflow).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Should return the workflow version\", () => {\r",
													"    pm.expect(response.workflow.version).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Should return the workflow name\", () => {\r",
													"    pm.expect(response.workflow.name).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Should return the workflow id\", () => {\r",
													"    pm.expect(response.workflow.id).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"The workflow_id should be the same provided\", () => {\r",
													"    pm.expect(response.workflow.id).to.eql(workflow_id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aa4d6f1c-6b52-4eb7-afa4-536fe4fe5b4d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/workflows/:id/create",
											"host": [
												"{{host}}"
											],
											"path": [
												"workflows",
												":id",
												"create"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{fb_test_listProcessesAlt_workflowId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "6ad573da-bf0f-45b6-924c-f328379c0d17"
						},
						{
							"name": "List Processes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3c64d8c-ccd3-40d1-8c6e-35567e5f5c7c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Should return more than 2 proceses\", () => {\r",
											"    pm.expect(response).to.have.length(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6fdd18af-2bb0-4ef0-ad91-21e125226bda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/:id/processes",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										":id",
										"processes"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_listProcesses_workflowId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0dc56c86-b69f-4598-8d00-05bcd58f812b"
				}
			],
			"id": "3188743d-75fb-4a44-806a-f951fbbd3afd"
		},
		{
			"name": "Processes",
			"item": [
				{
					"name": "Processes Avaliable",
					"item": [],
					"id": "c3f83503-1498-4130-82d2-d7479e84f53b"
				},
				{
					"name": "Process Done",
					"item": [],
					"id": "5e423a12-e235-4e3d-8136-bd4eb959afee"
				},
				{
					"name": "Current State",
					"item": [],
					"id": "436fa427-1a87-4747-b91c-47248e08d78d"
				},
				{
					"name": "Process History",
					"item": [],
					"id": "4c799958-8a89-4fe0-9b8d-ba1a80d0474f"
				},
				{
					"name": "Current Activity",
					"item": [],
					"id": "a924f63b-1f91-4022-b6fd-2b15e97f926b"
				},
				{
					"name": "Run Process",
					"item": [],
					"id": "843a78db-b713-42cb-900c-1a009d7c53cf"
				},
				{
					"name": "Abort Process",
					"item": [],
					"id": "df347849-9b0d-48bb-862a-5124b03d3801"
				},
				{
					"name": "Commit Activity",
					"item": [],
					"id": "701b19e3-7cce-4060-b23b-5bd748dc0a05"
				},
				{
					"name": "Submit Activity",
					"item": [],
					"id": "9f731846-5b30-4639-80c0-84bf0114aff0"
				},
				{
					"name": "Continue Process",
					"item": [],
					"id": "5aa6e445-6ba8-494b-8106-0290dbeb8509"
				}
			],
			"id": "84945420-a57c-402f-9a6c-0ce82325d518"
		},
		{
			"name": "States",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create a Workflow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1349e30f-02e6-40ba-8b9f-85cf0ea247ff",
										"exec": [
											"pm.environment.set(\"fb_test_states_workflowName\", \"fb_test_states\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c603ee10-dc70-4cfb-8a90-1392a39e560d",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fb_test_states_workflowId\",response.workflow_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8e733748-30a3-4da1-b95a-7694921d5c9a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{fb_test_states_workflowName}}\",\r\n    \"description\": \"system workflow\",\r\n    \"blueprint_spec\": {\r\n        \"requirements\": [\r\n            \"core\"\r\n        ],\r\n        \"prepare\": [],\r\n        \"nodes\": [\r\n            {\r\n                \"id\": \"START\",\r\n                \"type\": \"Start\",\r\n                \"name\": \"Start node\",\r\n                \"parameters\": {\r\n                    \"input_schema\": {}\r\n                },\r\n                \"next\": \"DO\",\r\n                \"lane_id\": \"1\"\r\n            },\r\n            {\r\n                \"id\": \"DO\",\r\n                \"name\": \"call endpoint\",\r\n                \"type\": \"systemTask\",\r\n                \"category\": \"http\",\r\n                \"next\": \"END\",\r\n                \"lane_id\": \"1\",\r\n                \"parameters\": {\r\n                    \"input\": {},\r\n                    \"request\": {\r\n                        \"url\": {\r\n                            \"$mustache\": \"{{{parameters.url}}}/get?foo1=bar1&foo2=bar2\"\r\n                        },\r\n                        \"verb\": \"GET\",\r\n                        \"headers\": {\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"END\",\r\n                \"type\": \"Finish\",\r\n                \"name\": \"Finish node\",\r\n                \"next\": null,\r\n                \"lane_id\": \"1\"\r\n            }\r\n        ],\r\n        \"lanes\": [\r\n            {\r\n                \"id\": \"1\",\r\n                \"name\": \"the_only_lane\",\r\n                \"rule\": [\r\n                    \"fn\",\r\n                    [\r\n                        \"&\",\r\n                        \"args\"\r\n                    ],\r\n                    true\r\n                ]\r\n            }\r\n        ],\r\n        \"environment\": {},\r\n        \"parameters\": {\r\n            \"url\": \"https://postman-echo.com\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/workflows",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start the Process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c778462-e78a-4bb7-b7ee-123fafce2a06",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fb_test_states_processId\",response.process_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd629692-6bef-49e2-b723-6f17907f5667",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/workflows/name/:name/start",
									"host": [
										"{{host}}"
									],
									"path": [
										"workflows",
										"name",
										":name",
										"start"
									],
									"variable": [
										{
											"key": "name",
											"value": "{{fb_test_states_workflowName}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "8d82de03-5c3b-40dd-beee-df86726c7649"
				},
				{
					"name": "Find States",
					"item": [
						{
							"name": "Find State By NodeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69df368b-f4a6-48bd-93e7-00b1757a5b32",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Should return a state\", () => {\r",
											"    pm.expect(response.states).to.exist;\r",
											"});\r",
											"pm.test(\"Should return a state with id\", () => {\r",
											"    pm.expect(response.states[0].id).to.exist;\r",
											"});\r",
											"\r",
											"if(response.states) {\r",
											"    pm.environment.set(\"fb_test_states_stateId\",response.states[0].id)\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "56178f61-2bb8-42dd-ab47-fa23237ed865",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/process/:id?nodeId=DO",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										"process",
										":id"
									],
									"query": [
										{
											"key": "nodeId",
											"value": "DO"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_states_processId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find State By Step Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce05b753-173f-4fa6-b0a6-bc4eab9fc5d5",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Should return an id\", () => {\r",
											"    pm.expect(response.id).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fa250ac6-3488-44ff-98ac-fd2626e8cbed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/process/:id?stepNumber=3",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										"process",
										":id"
									],
									"query": [
										{
											"key": "stepNumber",
											"value": "3"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_states_processId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "394dd2ae-0b36-40e0-a2ec-746a57732131"
				},
				{
					"name": "Read State",
					"item": [
						{
							"name": "Read State",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ec173d-4d26-4881-b95c-a8d9409e56f1",
										"exec": [
											"const response = pm.response.json();\r",
											"const state_id = pm.environment.get(\"fb_test_states_stateId\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Should return the id provided\", () => {\r",
											"    pm.expect(response.id).to.eql(state_id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d753afc5-605e-41c4-9aec-da77fe2d715e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_states_stateId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read State (random id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cacd627f-985a-4a7d-9548-ce26385016d7",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Should return the status was not found\", () => {\r",
											"    pm.expect(response.message).to.eql(\"stateId not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "722d59c1-3ad9-48f6-9e3e-64d2caa738b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read State (not uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a577936-1634-43ee-8b15-c18fda53101f",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Should return the the uuid is invalid\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid uuid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5450f399-eda8-4a8a-aa87-962328db55d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "a31c2a86-bcfe-4322-a21b-34e6ab509de4"
				},
				{
					"name": "Calculate Execution",
					"item": [
						{
							"name": "State Execution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57cf71ef-6e90-4242-853f-cba984f0021c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Should return the request url\", () => {\r",
											"    pm.expect(response.request).to.exist;\r",
											"});\r",
											"pm.test(\"The url should be resolved\", () => {\r",
											"    var schema = { \"type\": \"string\", \"format\": \"hostname\" }\r",
											"    pm.expect(tv4.validate(response.request.url, schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e2b1d28f-bb57-4496-b0d7-fb9a2b32c2ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/execution",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"execution"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_states_stateId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "State Execution (random id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dcc8bb6-378e-48b3-98c5-7467aa499a30",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Should return the status was not found\", () => {\r",
											"    pm.expect(response.message).to.eql(\"stateId not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "22607c6f-c21f-4b7d-9185-e1a210f5ea63",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/execution",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"execution"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "State Execution (not an uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f557a95-b53e-481f-8de2-1fcf2972811c",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Should return the the uuid is invalid\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid uuid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "219c846c-518c-4d96-bdf5-cc2d89100380",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/execution",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"execution"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dc83ec4e-baed-42de-9401-ef9184eafc49"
				},
				{
					"name": "Read State Spec",
					"item": [
						{
							"name": "State Spec",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f347a1a0-7725-4a23-8d01-257e4e27b31d",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Should return the node id\", () => {\r",
											"    pm.expect(response.id).to.eql(\"DO\");\r",
											"});\r",
											"pm.test(\"The url should not be resolved\", () => {\r",
											"    var schema = { \"type\": \"string\", \"format\": \"hostname\" }\r",
											"    pm.expect(tv4.validate(response.parameters.request.url, schema)).to.be.false;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8df3166d-50e4-4cb2-b658-d6fd0f797c62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/spec",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"spec"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{fb_test_states_stateId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "State Spec (random id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eaca91f-0a31-4531-affb-e2f2185d08b3",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Should return the status was not found\", () => {\r",
											"    pm.expect(response.message).to.eql(\"stateId not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ad64253e-c4e2-45de-a2da-2bc0ee135027",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/spec",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"spec"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$guid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "State Spec (not a uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "627e252f-270a-4cfe-b283-fb9dd7e9e783",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Should return the the uuid is invalid\", () => {\r",
											"    pm.expect(response.message).to.eql(\"Invalid uuid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "235b7d38-2cb5-4bb2-b5fd-a314a049c719",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/states/:id/spec",
									"host": [
										"{{host}}"
									],
									"path": [
										"states",
										":id",
										"spec"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{$randomWord}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ef402659-73ec-4c36-aeb7-07d5a22b7e02"
				}
			],
			"id": "699b682d-1ea6-4080-8378-3584507e3e7b"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "1182a492-9907-43a2-95a2-bb34c7061ada"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "fe964dd3-cf60-4332-b943-0bf98d4c83d8"
			}
		}
	],
	"variable": [
		{
			"id": "b493df46-6888-4c7d-8740-905f35c7747e",
			"key": "package_id",
			"value": ""
		},
		{
			"id": "96cbe930-0925-43f7-a796-68b9c201a404",
			"key": "workflow_id",
			"value": ""
		},
		{
			"id": "26128d23-19b9-4b47-b4dc-c13c418676bd",
			"key": "actor_id",
			"value": ""
		},
		{
			"id": "32a03425-f11d-4149-9da1-1b28296b28f5",
			"key": "workflow_name",
			"value": ""
		},
		{
			"id": "e8a44dcd-be2a-4948-949d-3d29c5bab2b6",
			"key": "workflow_id_for_delete",
			"value": ""
		},
		{
			"id": "576d9dd3-dc19-4fc6-ba73-3af2cf8e1946",
			"key": "workflow_id_for_list_process",
			"value": ""
		},
		{
			"id": "44400935-e7c4-4b56-8c87-001ff60e8316",
			"key": "workflow_name_for_create",
			"value": ""
		},
		{
			"id": "5381a1fe-66fb-44f9-bad8-908b428f15d3",
			"key": "workflow_id_for_create",
			"value": ""
		},
		{
			"id": "8f98967c-c6b3-4cf4-a31e-242d563092a4",
			"key": "duration",
			"value": ""
		},
		{
			"id": "5098f688-3f32-4042-a009-7b1456e3cd4e",
			"key": "claims",
			"value": ""
		},
		{
			"id": "c694b948-3907-4a6b-bdec-0db67594a4e0",
			"key": "fb_test_createProcess_workflowName",
			"value": ""
		},
		{
			"id": "9be4b9b9-db6f-4dd6-9684-f2eaeb1b4c52",
			"key": "fb_test_createProcess_workflowId",
			"value": ""
		},
		{
			"id": "35ec6e17-d382-49a3-9c13-b087943d5b91",
			"key": "fb_test_deleteWorkflow_workflowId",
			"value": ""
		}
	]
}